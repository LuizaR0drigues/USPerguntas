    "1) Matematica (facil).\n"<<
    "2) Matematica (dificil).\n"<<
    "3) Humanas (facil).\n" <<
    "4) Humanas (dificil).\n"<<
    "5) Biologia (facil)\n" <<
    "6) Biologia (dificil).\n"<<
    "7) Lingua Portuguesa (facil).\n" <<
    "8) Lingua Portuguesa (dificil). \n" << std::endl;


a,12321,0,0,0,0,0,0,0,0,0
leticia,12321,0,0,0,0,0,0,0,0,0
b,12321,0,0,0,0,0,0,0,0,0
c,12321,0,0,0,0,0,0,0,0,

    checar se todos os arquivos estao fechando

     getline(sLinha,temp,',');
    _scores["mat_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["mat_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["humanas_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["humanas_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["bio_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["bio_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["lp_facil"] = stoi(temp);

    getline(sLinha,temp,',');
    _scores["lp_facil"] = stoi(temp);

    bool ArquivosCSV::alterarJogador(Jogador jogador, std::string scoreType, int score)
{

    std::string linha, nomeSalvo;
    std::fstream jogadorTemp;
    std::stringstream sLinha, sLinha2;

    jogadorTemp.open("jogadores_temp.csv", std::ios::out | std::ios::in);

    if (!jogadorTemp)
    {
        printf("Erro ao criar o arquivo temporario de jogadores");
        return false;
    }

    if (!_stringJogadores.empty())
    {
        //   std::cout << "Temos uma string de jogadores" << std::endl;
        if (_jogadoresCSV.is_open())
        {
            _jogadoresCSV.close();
            //   std::cout << "Fechando o arquivo de jogadores que estava aberto" << std::endl;
        }
        _jogadoresCSV.open(_stringJogadores, std::ios::in);
    }

    if (!_jogadoresCSV.is_open())
    {
        _jogadoresCSV.open(_stringJogadores, std::ios::out);
    }

    if (!_jogadoresCSV.is_open())
    {
        // std::cout << "O arquivo de jogadores nÃ£o pode ser aberto" << std::endl;
        return false;
    }

    Jogador temp;
    bool escrito = false;

   /* if (scoreType != "geral")
        while (getline(_jogadoresCSV, linha))
        {
            // std::cout << "("<< nomeSalvo << "=" << nome << ")" << std::endl;
            sLinha.str(linha);
            getline(sLinha, nomeSalvo, ',');
            if (nomeSalvo != jogador.get_Id())
            {
                jogadorTemp << linha;
            }
            else
            {
                jogadorTemp << alterarScores(linha, scoreType, score);
            }
        }
    else{ */
    
        sLinha2 << jogador.get_Id() << "," << jogador.get_Senha() << "," <<
        jogador.get_scoregeral() << "," << jogador.get_scores()["mat_facil"] <<
        ","<< jogador.get_scores()["mat_dificil"] << "," 
        << "," << jogador.get_scores()["humanas_facil"]<< "," << jogador.get_scores()["humanas_dificil"]
        << "," << jogador.get_scores()["bio_facil"]<< "," << jogador.get_scores()["bio_dificil"]
        << "," << jogador.get_scores()["lp_facil"]<< "," << jogador.get_scores()["lp_dificil"] << std::endl;



        while (getline(_jogadoresCSV, linha)){

            temp.leJogador(linha);
            if (temp < jogador && !escrito){
                jogadorTemp << sLinha2.str();
                escrito = true;
            }
             jogadorTemp << linha;

        }
    }

    _jogadoresCSV.close();

    _jogadoresCSV.open(_stringJogadores, std::ios::in);

    jogadorTemp.seekg(0, std::ios_base::beg);

    while (getline(jogadorTemp, linha))
    {
        _jogadoresCSV << linha;
        // std::cout << "_jogadoresCSV recebeu: " << linha << std::endl;
    }

    return false;
}

std::string alterarScores(std::string linha, std::string scoreType, int score)
{

    std::stringstream sLinha(linha);
    // std::cout << linha << std::endl;

    std::vector<std::string> vScores;
    int i = 0;
    int scoreNum = 0;

    if (scoreType == "geral")
    {
        scoreNum = 2;
    }
    else if (scoreType == "mat_facil")
    {
        scoreNum = 3;
    }
    else if (scoreType == "mat_dificil")
    {
        scoreNum = 4;
    }
    else if (scoreType == "humanas_facil")
    {
        scoreNum = 5;
    }
    else if (scoreType == "humanas_dificil")
    {
        scoreNum = 6;
    }
    else if (scoreType == "bio_facil")
    {
        scoreNum = 7;
    }
    else if (scoreType == "bio_dificil")
    {
        scoreNum = 8;
    }
    else if (scoreType == "lp_facil")
    {
        scoreNum = 9;
    }
    else if (scoreType == "lp_dificil")
    {
        scoreNum = 10;
    }

    std::string temp;

    while (getline(sLinha, temp, ','))
    {
        vScores.push_back(temp);
        // std::cout << vScores[i] << ",";
        i++;
    }

    getline(sLinha, temp);
    vScores.push_back(temp);

    std::stringstream sLinha2;

    // std::cout << "vScore[" << scoreNum << "] " << std::stoi(vScores[scoreNum]) << " < " << score << "?" << std::endl;

    if (std::stoi(vScores[scoreNum]) < score)
    {
        vScores[scoreNum] = std::to_string(score);
        std::cout << "vscore[3] = " << vScores[3] << std::endl;

        sLinha2 << vScores[0] << "," << vScores[1] << "," << vScores[2] << ","
                << vScores[3] << "," << vScores[4] << "," << vScores[5] << ","
                << vScores[6] << "," << vScores[7] << "," << vScores[8] << ","
                << vScores[9] << "," << vScores[10] << std::endl;

        linha = sLinha2.str();
        // std::cout << linha << std::endl;
    }

    // std::cout << linha;

    return linha;
}
